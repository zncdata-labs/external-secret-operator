---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cert-store
spec:
  resources:
    requests:
      storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auto-tls
  labels:
    name: auto-tls
spec:
  replicas: 3
  selector:
    matchLabels:
      name: auto-tls
  template:
    metadata:
      labels:
        name: auto-tls
    spec:
      containers:
      - name: auto-tls
        image: registry.access.redhat.com/ubi9/openjdk-21:1.20
        command:
        - /bin/sh
        - -c
        - |
          set -xe
          microdnf install -y diffutils openssl

          KEYSTORE_FILE=/opt/security/tls/keystore.p12
          TRUSTSTORE_FILE=/opt/security/tls/truststore.p12
          SERVER_PEM_FILE=/opt/security/tls/server.pem

          # Check if keystore and truststore exist
          if [ ! -f $KEYSTORE_FILE ] || [ ! -f $TRUSTSTORE_FILE ]; then
            echo "Keystore or truststore does not exist." >&2
            exit 1
          fi

          tail -f

          # Check if keystore contains more than 0 entries
          entryCount=$(keytool -list -keystore $KEYSTORE_FILE -storepass $P12PASSWORD | grep 'Your keystore contains' | awk '{print $4}')
          if [ $entryCount -gt 0 ]; then
              echo "Keystore contains more than 0 entries."
          else
              echo "Keystore contains 0 entries." >&2
              exit 1
          fi

          # Check server certificate in keystore is not expired, default is 60 * 60 * 24 * 7 seconds
          EXPIRESLIFE=$((23 * 60 * 60)) # 23 hours
          openssl pkcs12 -in "$KEYSTORE_FILE" -passin pass:"$P12PASSWORD" -nokeys -clcerts -out "$SERVER_PEM_FILE"
          if ! openssl x509 -checkend $EXPIRESLIFE -noout -in "$SERVER_PEM_FILE"; then
            echo "Server certificate in keystore is expired within $EXPIRESLIFE ." >&2
            exit 1
          fi

          # Save the server certificate summary to a file
          keytool -list -keystore $TRUSTSTORE_FILE -storepass $P12PASSWORD >> /opt/summary/$POD_NAME.txt
          cat /opt/summary/$POD_NAME.txt

          tail -f /dev/null
        resources:
          limits:
            memory: "512Mi"
            cpu: "300m"
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: P12PASSWORD
          value: changeit
        ports:
        - containerPort: 80
          name: web
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              set -e
              # check the all files content under /opt/certs/ are the same
              for file in $(ls /opt/summary); do
                if ! diff /opt/summary/$file /opt/summary/$POD_NAME.txt; then
                  echo "Files are different /opt/summary/$file /opt/summary/$POD_NAME.txt" >&2
                  exit 1
                fi
              done
              echo "All checks passed."
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
        volumeMounts:
        - name: tls
          mountPath: /opt/security/tls
        - name: certs
          mountPath: /opt/summary
      volumes:
      - name: certs
        persistentVolumeClaim:
          claimName: cert-store
      - name: tls
        ephemeral:
          volumeClaimTemplate:
            metadata:
              annotations:
                secrets.kubedoop.dev/class: tls
                secrets.kubedoop.dev/format: tls-p12
                secrets.kubedoop.dev/scope: pod,node
                secrets.kubedoop.dev/tlsPKCS12Password: changeit
            spec:
              accessModes: ["ReadWriteOnce"]
              storageClassName: secrets.kubedoop.dev
              resources:
                requests:
                  storage: 1Mi
