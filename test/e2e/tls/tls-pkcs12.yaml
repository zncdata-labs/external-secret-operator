---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auto-tls
  labels:
    name: auto-tls
spec:
  replicas: 3
  selector:
    matchLabels:
      name: auto-tls
  template:
    metadata:
      labels:
        name: auto-tls
    spec:
      containers:
      - name: auto-tls
        image: quay.io/zncdatadev/testing-tools:0.1.0-kubedoop0.0.0-dev
        command:
        - /bin/bash
        - -c
        - |
          KEYSTORE_FILE=/opt/security/tls/keystore.p12
          TRUSTSTORE_FILE=/opt/security/tls/truststore.p12
          SERVER_PEM_FILE=/opt/security/tls/server.pem

          # Arguments:
          # Returns:
          #   0: success
          #   1: fail
          function checkTLSPKCS12 () {
            # Check if keystore and truststore exist
            if [ ! -f $KEYSTORE_FILE ] || [ ! -f $TRUSTSTORE_FILE ]; then
              echo "Keystore or truststore does not exist." >&2
              return 1
            fi

            # Check if keystore contains more than 0 entries
            entryCount=$(keytool -list -keystore $KEYSTORE_FILE -storepass $P12PASSWORD | grep 'Your keystore contains' | awk '{print $4}')
            if [ $entryCount -gt 0 ]; then
                echo "Keystore contains more than 0 entries." >&2
            else
                echo "Keystore contains 0 entries." >&2
                return 1
            fi

            # Check server certificate in keystore is not expired, default is 60 * 60 * 24 * 7 seconds
            EXPIRESLIFE=$((23 * 60 * 60)) # 23 hours
            openssl pkcs12 -in "$KEYSTORE_FILE" -passin pass:"$P12PASSWORD" -nokeys -clcerts -out "$SERVER_PEM_FILE"
            if ! openssl x509 -checkend $EXPIRESLIFE -noout -in "$SERVER_PEM_FILE"; then
              echo "Server certificate in keystore is expired within $EXPIRESLIFE ." >&2
              return 1
            fi

            echo "All checks passed." >&2
            return 0
          }

          # Continuous check with 10 seconds interval until the function returns 0
          while true; do
            if checkTLSPKCS12; then
              break
            fi
            sleep 10
          done

          # save assert result success to /kubedoop/assert/success
          echo "success" > /kubedoop/assert/success

          sleep infinity

        resources:
          limits:
            memory: "512Mi"
            cpu: "300m"
        securityContext:
          runAsUser: 0
          runAsGroup: 0
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: P12PASSWORD
          value: changeit
        ports:
        - containerPort: 80
          name: web
        readinessProbe:
          exec:
            command:
            - test
            - -f
            - /kubedoop/assert/success
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
        volumeMounts:
        - name: tls
          mountPath: /kubedoop/tls
      volumes:
      - name: tls
        ephemeral:
          volumeClaimTemplate:
            metadata:
              annotations:
                secrets.kubedoop.dev/class: tls
                secrets.kubedoop.dev/format: tls-p12
                secrets.kubedoop.dev/scope: pod,node
                secrets.kubedoop.dev/tlsPKCS12Password: changeit
            spec:
              accessModes: ["ReadWriteOnce"]
              storageClassName: secrets.kubedoop.dev
              resources:
                requests:
                  storage: 1Mi
