package secretcsi

import (
	"context"
	"os"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	operatorclient "github.com/zncdatadev/operator-go/pkg/client"
	"github.com/zncdatadev/operator-go/pkg/constants"
	secretsv1alpha1 "github.com/zncdatadev/secret-operator/api/v1alpha1"
)

type AutoTlsSecretClass struct {
	client client.Client
}

func NewAutoTlsSecretClass(client client.Client) *AutoTlsSecretClass {
	return &AutoTlsSecretClass{
		client: client,
	}
}

func (r *AutoTlsSecretClass) Reconcile(ctx context.Context) (ctrl.Result, error) {
	obj := r.build()
	logger.V(1).Info("Create a default SecretClass for AutoTLS", "Name", obj.Name)
	return r.apply(ctx, obj)
}

func (r *AutoTlsSecretClass) build() *secretsv1alpha1.SecretClass {

	controllerNamespace := os.Getenv("NAMESPACE")

	if controllerNamespace == "" {
		controllerNamespace = "default"
	}

	obj := &secretsv1alpha1.SecretClass{
		ObjectMeta: metav1.ObjectMeta{
			Name: "tls",
			Labels: map[string]string{
				constants.LabelKubernetesInstance:  "tls",
				constants.LabelKubernetesName:      "secretclass",
				constants.LabelKubernetesManagedBy: "secret-operator",
			},
		},
		Spec: secretsv1alpha1.SecretClassSpec{
			Backend: &secretsv1alpha1.BackendSpec{
				AutoTls: &secretsv1alpha1.AutoTlsSpec{
					CA: &secretsv1alpha1.CASpec{
						AutoGenerated:         true,
						CACertificateLifeTime: "87600h", // 10 years
						Secret: &secretsv1alpha1.SecretSpec{
							Name:      "secret-provisioner-tls-ca",
							Namespace: controllerNamespace,
						},
					},
					MaxCertificateLifeTime: "43800h", // 5 years
				},
			},
		},
	}

	return obj
}

func (r *AutoTlsSecretClass) apply(ctx context.Context, obj *secretsv1alpha1.SecretClass) (ctrl.Result, error) {
	mutant, err := operatorclient.CreateOrUpdate(ctx, r.client, obj)
	if err != nil {
		return ctrl.Result{}, err
	} else if mutant {
		return ctrl.Result{Requeue: true}, nil
	}
	return ctrl.Result{}, nil
}
